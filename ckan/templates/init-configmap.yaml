{{ if not .Values.centralizedInfraOnly }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: ckan-init
data:
  install.sh: |
    while ! ( apk update && apk add --no-cache --update-cache --repository ${APK_REPOSITORY} --allow-untrusted \
        bash python grep jq python3 libcurl git docker openssl curl ca-certificates wget \
        openssh-server openssh-sftp-server postgresql-client \
    ); do sleep 1; done &&\
    wget -qO kubectl https://storage.googleapis.com/kubernetes-release/release/$(wget -qO - https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl &&\
    chmod +x kubectl && mv ./kubectl /usr/local/bin/kubectl &&\
    python3 -m pip install pyyaml
  functions.sh: |
    get_secrets_json() {
        kubectl $KUBECTL_GLOBAL_ARGS get secret $1 -o json
    }
    get_secret_from_json() {
        local VAL=`echo "${1}" | jq -r ".data.${2}"`
        if [ "${VAL}" != "" ] && [ "${VAL}" != "null" ]; then
            echo "${VAL}" | base64 -d
        fi
    }
    # export the ckan env vars from the ckan env vars secret
    export_ckan_env_vars() {
        ENV_VARS_SECRET="${1}"
        [ -z "${ENV_VARS_SECRET}" ] && return 0
        ! SECRETS_JSON=`get_secrets_json $ENV_VARS_SECRET` \
            && echo could not find ckan env vars secret ENV_VARS_SECRET && return 0
        export CKAN_APP_INSTANCE_UUID=`get_secret_from_json "${SECRETS_JSON}" CKAN_APP_INSTANCE_UUID`
        export CKAN_BEAKER_SESSION_SECRET=`get_secret_from_json "${SECRETS_JSON}" CKAN_BEAKER_SESSION_SECRET`
        export POSTGRES_PASSWORD=`get_secret_from_json "${SECRETS_JSON}" POSTGRES_PASSWORD`
        export POSTGRES_USER=`get_secret_from_json "${SECRETS_JSON}" POSTGRES_USER`
        export POSTGRES_HOST=`get_secret_from_json "${SECRETS_JSON}" POSTGRES_HOST`
        export POSTGRES_DB_NAME=`get_secret_from_json "${SECRETS_JSON}" POSTGRES_DB_NAME`
        export DATASTORE_POSTGRES_PASSWORD=`get_secret_from_json "${SECRETS_JSON}" DATASTORE_POSTGRES_PASSWORD`
        export DATASTORE_POSTGRES_USER=`get_secret_from_json "${SECRETS_JSON}" DATASTORE_POSTGRES_USER`
        export DATASTORE_RO_USER=`get_secret_from_json "${SECRETS_JSON}" DATASTORE_RO_USER`
        export DATASTORE_RO_PASSWORD=`get_secret_from_json "${SECRETS_JSON}" DATASTORE_RO_PASSWORD`
        export SOLR_URL=`get_secret_from_json "${SECRETS_JSON}" SOLR_URL`

        ( [ -z "${CKAN_BEAKER_SESSION_SECRET}" ] || [ -z "${CKAN_APP_INSTANCE_UUID}" ] || [ -z "${POSTGRES_PASSWORD}" ] || \
          [ -z "${POSTGRES_USER}" ] ) && echo missing required ckan env vars && return 1

        return 0
    }
    kubectl_init() {
        if ! [ -z "${KUBE_CONTEXT}" ]; then
            ! kubectl $KUBECTL_GLOBAL_ARGS config use-context "${KUBE_CONTEXT}" > /dev/stderr && echo failed to switch context > /dev/stderr && return 1
        fi
        return 0
    }
    cluster_management_init() {
        ! kubectl_init > /dev/stderr && return 1
        export INSTANCE_ID="${1}"
        [ -z "${INSTANCE_ID}" ] && echo missing INSTANCE_ID > /dev/stderr && return 1
        export INSTANCE_NAMESPACE="${INSTANCE_ID}"
        export CKAN_VALUES_FILE=/etc/ckan-cloud/${INSTANCE_ID}_values.yaml
        export CKAN_HELM_RELEASE_NAME="ckan-cloud-${INSTANCE_NAMESPACE}"
        return 0
    }
    instance_kubectl() {
        [ -z "${INSTANCE_NAMESPACE}" ] && echo missing INSTANCE_NAMESPACE > /dev/stderr && return 1
        kubectl $KUBECTL_GLOBAL_ARGS -n "${INSTANCE_NAMESPACE}" "$@"
    }
    instance_connection_info() {
        INSTANCE_ID="${1}"
        INSTANCE_NAMESPACE="${2}"
        INSTANCE_DOMAIN="${3}"
        CKAN_ADMIN_PASSWORD="${4}"
        if [ -z "${INSTANCE_DOMAIN}" ]; then
            echo Start port forwarding to access the instance:
            echo kubectl $KUBECTL_GLOBAL_ARGS -n ${INSTANCE_NAMESPACE} port-forward deployment/nginx 8080
            echo Add a hosts entry: "'127.0.0.1 nginx'"
            echo Access the instance at http://nginx:8080
        else
            echo CKAN Instance ${INSTANCE_ID} is available at https://${INSTANCE_DOMAIN}
        fi
        echo CKAN admin password: ${CKAN_ADMIN_PASSWORD}
    }
    instance_domain() {
        CKAN_VALUES_FILE="${1}"
        python3 -c 'import yaml; print(yaml.load(open("'${CKAN_VALUES_FILE}'")).get("domain", ""))'
    }
    add_domain_to_traefik() {
        export DOMAIN="${1}"
        export WITH_SANS_SSL="${2}"
        export INSTANCE_ID="${3}"
        export SERVICE_NAME="${4:-nginx}"
        export SERVICE_PORT="${5:-8080}"
        export SERVICE_NAMESPACE="${6:-${INSTANCE_ID}}"
        ( [ -z "${DOMAIN}" ] || [ -z "${INSTANCE_ID}" ] ) && echo missing required args && return 1
        ! python3 -c 'import toml' && python3 -m pip install --index-url ${PIP_INDEX_URL:-https://pypi.org/simple/} toml
        mkdir -p "/etc/ckan-cloud/backups/etc-traefik"
        BACKUP_FILE="/etc/ckan-cloud/backups/etc-traefik/`date +%Y%m%d%H%M%s`.yaml"
        kubectl $KUBECTL_GLOBAL_ARGS -n default get configmap etc-traefik -o yaml > $BACKUP_FILE &&\
        export TEMPFILE=`mktemp` &&\
        cat $BACKUP_FILE | python3 -c '
    import sys, yaml, toml, os
    conf = toml.loads(yaml.load(sys.stdin)["data"]["traefik.toml"])
    domain = os.environ["DOMAIN"]
    with_sans_ssl = os.environ["WITH_SANS_SSL"]
    instance_id = os.environ["INSTANCE_ID"]
    service_name = os.environ["SERVICE_NAME"]
    service_port = os.environ["SERVICE_PORT"]
    service_namespace = os.environ["SERVICE_NAMESPACE"]
    for frontend_id, frontend in conf["frontends"].items():
        if frontend_id != instance_id:
            for route in frontend.get("routes", {}).values():
                if route.get("rule", "") == f"Host:{domain}":
                    print(f"frontend rule already exists for domain {domain} under instance_id {frontend_id}", file=sys.stderr)
                    exit(1)
    conf["frontends"][instance_id] = {"backend": instance_id, "headers": {"SSLRedirect": True}, "passHostHeader": True,
                                      "routes": {"route1": {"rule": f"Host:{domain}"}}}
    conf["backends"][instance_id] = {"servers": {"server1": {"url": f"http://{service_name}.{service_namespace}:{service_port}"}}}
    if with_sans_ssl == "1":
        main_domain = conf["acme"]["domains"][0]["main"]
        assert domain.endswith(f".{main_domain}"), f"Invalid domain {domain} - must be subdomain of the main domain {main_domain}"
        if domain not in conf["acme"]["domains"][0]["sans"]:
          conf["acme"]["domains"][0]["sans"].append(domain)
    print(toml.dumps(conf))
    exit(0)' > $TEMPFILE &&\
        kubectl $KUBECTL_GLOBAL_ARGS delete configmap etc-traefik &&\
        kubectl $KUBECTL_GLOBAL_ARGS create configmap etc-traefik --from-file=traefik.toml=$TEMPFILE &&\
        rm $TEMPFILE &&\
        kubectl $KUBECTL_GLOBAL_ARGS patch deployment traefik -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" &&\
        while ! kubectl $KUBECTL_GLOBAL_ARGS rollout status deployment traefik --watch=false; do echo . && sleep 5; done &&\
        [ "$?" != "0" ] && echo Failed to add domain to traefik && return 1
        return 0
    }
    generate_password() {
        python -c "import binascii,os;print(binascii.hexlify(os.urandom(${1:-12})))"
    }
    create_db_base() {
        local POSTGRES_HOST="${1}"
        local POSTGRES_USER="${2}"
        local CREATE_POSTGRES_USER="${3}"
        local CREATE_POSTGRES_PASSWORD="${4}"
        ( [ -z "${POSTGRES_HOST}" ] || [ -z "${POSTGRES_USER}" ] || [ -z "${CREATE_POSTGRES_USER}" ] || [ -z "${CREATE_POSTGRES_PASSWORD}" ] ) && return 1
        echo Initializing ${CREATE_POSTGRES_USER} on ${POSTGRES_HOST}

        export DB_NAME_FOR_AZ
        # Azuresql users ar formated lik <string>"@"<string>. and psql needs dbname to connect
        if [[ "${POSTGRES_USER}" == *"@"* ]]; then
            DB_NAME_FOR_AZ="-d postgres"
        fi

        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" ${DB_NAME_FOR_AZ} -c "
            CREATE ROLE \"${CREATE_POSTGRES_USER}\" WITH LOGIN PASSWORD '${CREATE_POSTGRES_PASSWORD}' NOSUPERUSER NOCREATEDB NOCREATEROLE;
        " &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d postgres -c "
            CREATE DATABASE \"${CREATE_POSTGRES_USER}\";
        " &&\
        echo DB initialized successfully && return 0
        # Update user with new password if exists and make sure they have full controll of DB
        echo User $CREATE_POSTGRES_USER already exists, updating password...
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" ${DB_NAME_FOR_AZ} -c "
            ALTER USER \"${CREATE_POSTGRES_USER}\" WITH PASSWORD '${CREATE_POSTGRES_PASSWORD}';
        " &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d ${CREATE_POSTGRES_USER} -c "
            GRANT CREATE ON SCHEMA public TO \"${CREATE_POSTGRES_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public to \"${CREATE_POSTGRES_USER}\";
        " &&  echo DB initialized successfully && return 0
        echo DB Initialization failed && return 1
    }
    create_db() {
        local POSTGRES_HOST="${1}"
        local POSTGRES_USER="${2}"
        local CREATE_POSTGRES_USER="${3}"
        local CREATE_POSTGRES_PASSWORD="${4}"
        POSTGRES_USER_HOSTLESS=$(echo $POSTGRES_USER | cut -f1 -d"@")
        ! create_db_base "${POSTGRES_HOST}" "${POSTGRES_USER}" "${CREATE_POSTGRES_USER}" "${CREATE_POSTGRES_PASSWORD}" && return 1
        echo initializing postgis extensions &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${CREATE_POSTGRES_USER}" -c "
            CREATE EXTENSION IF NOT EXISTS postgis;
            CREATE EXTENSION IF NOT EXISTS postgis_topology;
            CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
            CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
        " &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d ${CREATE_POSTGRES_USER} -c "
            GRANT CREATE ON SCHEMA topology TO \"${CREATE_POSTGRES_USER}\";
            GRANT USAGE ON SCHEMA topology TO \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA topology to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA topology to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA topology to \"${CREATE_POSTGRES_USER}\";
            GRANT CREATE ON SCHEMA tiger TO \"${CREATE_POSTGRES_USER}\";
            GRANT USAGE ON SCHEMA tiger TO \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA tiger to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA tiger to \"${CREATE_POSTGRES_USER}\";
            GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA tiger to \"${CREATE_POSTGRES_USER}\";
        " &&\
        ckan_cloud_log '{"event":"ckan-db-initialized"}' &&\
        echo postgis extensions initialized successfully && return 0
        echo postgis extensions failed && return 1
    }
    create_datastore_db() {
        local POSTGRES_HOST="${1}"
        local POSTGRES_USER="${2}"
        local SITE_USER="${3}"
        local DS_RW_USER="${4}"
        local DS_RW_PASSWORD="${5}"
        local DS_RO_USER="${6}"
        local DS_RO_PASSWORD="${7}"
        ! create_db_base "${POSTGRES_HOST}" "${POSTGRES_USER}" "${DS_RW_USER}" "${DS_RW_PASSWORD}" && return 1
        ( [ -z "${SITE_USER}" ] || [ -z "${DS_RO_USER}" ] || [ -z "${DS_RO_PASSWORD}" ] ) && return 1
        echo Initializing datastore DB ${DS_RW_USER} on ${POSTGRES_HOST}
        export SITE_USER
        export DS_RW_USER
        export DS_RO_USER
        export DB_NAME_FOR_AZ
        # Azuresql admin users are formated like <string>"@"<string>. and psql needs dbname to connect
        POSTGRES_USER_HOSTLESS=$(echo $POSTGRES_USER | cut -f1 -d"@")
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${DS_RW_USER}" -c "
            CREATE ROLE \"${DS_RO_USER}\" WITH LOGIN PASSWORD '${DS_RO_PASSWORD}' NOSUPERUSER NOCREATEDB NOCREATEROLE;
        "
        # Update user with new password if exists
        echo User $CREATE_POSTGRES_USER already exists, updating password...
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" ${DB_NAME_FOR_AZ} -c "
        ALTER USER \"${DS_RO_USER}\" WITH PASSWORD '${DS_RO_PASSWORD}';
        " && echo DB initialized successfully
        # Consider the case when There are no users but DB exists.
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${DS_RW_USER}" -c "
            GRANT \"${SITE_USER}\" TO \"${POSTGRES_USER_HOSTLESS}\";
            GRANT \"${DS_RW_USER}\" TO \"${POSTGRES_USER_HOSTLESS}\";
        "
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${DS_RW_USER}" -c "
            REVOKE CREATE ON SCHEMA public FROM PUBLIC;
            REVOKE USAGE ON SCHEMA public FROM PUBLIC;
            GRANT CREATE ON SCHEMA public TO \"${SITE_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${SITE_USER}\";
            GRANT CREATE ON SCHEMA public TO \"${DS_RW_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${DS_RW_USER}\";
            ALTER DATABASE \"${SITE_USER}\" OWNER TO \"${POSTGRES_USER_HOSTLESS}\";
            ALTER DATABASE \"${DS_RW_USER}\" OWNER TO \"${POSTGRES_USER_HOSTLESS}\";
            REVOKE CONNECT ON DATABASE \"${SITE_USER}\" FROM \"${DS_RO_USER}\";
            GRANT CONNECT ON DATABASE \"${DS_RW_USER}\" TO \"${DS_RO_USER}\";
            GRANT USAGE ON SCHEMA public TO \"${DS_RO_USER}\";
            GRANT \"${SITE_USER}\" TO \"${POSTGRES_USER_HOSTLESS}\";
            GRANT \"${DS_RW_USER}\" TO \"${POSTGRES_USER_HOSTLESS}\";
            ALTER DATABASE \"${SITE_USER}\" OWNER TO \"${SITE_USER}\";
            ALTER DATABASE \"${DS_RW_USER}\" OWNER TO \"${DS_RW_USER}\";
        " &&\
        psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${DS_RW_USER}" -c "
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"${DS_RO_USER}\";
            ALTER DEFAULT PRIVILEGES FOR USER \"${DS_RW_USER}\" IN SCHEMA public GRANT SELECT ON TABLES TO \"${DS_RO_USER}\";
        " &&\
        bash ./templater.sh ./datastore-permissions.sql.template | grep ' OWNER TO ' -v \
            | psql -v ON_ERROR_STOP=on -h "${POSTGRES_HOST}" -U "${POSTGRES_USER}" -d "${DS_RW_USER}" &&\
        ckan_cloud_log '{"event":"ckan-datastore-db-initialized"}' &&\
        echo Datastore DB initialized successfully && return 0
        echo Datastore DB initialization failed && return 1
    }
    ckan_cloud_log() {
        echo "--START_CKAN_CLOUD_LOG--$(echo "${1}" | jq -Mc .)--END_CKAN_CLOUD_LOG--" > /dev/stderr
    }
  cca-operator.sh: |
    #!/usr/bin/env bash
    source /etc/ckan-conf/scripts/functions.sh
    if [ "${1}" == "initialize-ckan-env-vars" ]; then
        ENV_VARS_SECRET="${2}"
        [ -z "${ENV_VARS_SECRET}" ] && echo usage: cca-operator initialize-ckan-env-vars '<ENV_VARS_SECRET_NAME>' && exit 1
        if ! kubectl $KUBECTL_GLOBAL_ARGS get secret $ENV_VARS_SECRET; then
            POSTGRES_PASSWORD=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(12)))"`
            DATASTORE_POSTGRES_PASSWORD=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(12)))"`
            DATASTORE_RO_PASSWORD=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(12)))"`
            if [ -z "${CKAN_CLOUD_POSTGRES_HOST}" ]; then
                echo Using self-hosted DB
                POSTGRES_USER=ckan
                POSTGRES_DB_NAME="${POSTGRES_USER}"
                POSTGRES_HOST=db
                DATASTORE_RO_USER=readonly
                DATASTORE_POSTGRES_USER=postgres
                CENTRALIZED_DB=0
            else
                echo Using centralized DB
                if [ -z "${CKAN_CLOUD_INSTANCE_ID}" ]; then
                    POSTGRES_USER=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(8)))"`
                    POSTGRES_USER="ckan-${POSTGRES_USER}"
                else
                    POSTGRES_USER="${CKAN_CLOUD_INSTANCE_ID}"
                fi
                ! create_db "${CKAN_CLOUD_POSTGRES_HOST}" "${CKAN_CLOUD_POSTGRES_USER:-postgres}" "${POSTGRES_USER}" "${POSTGRES_PASSWORD}" \
                    && exit 1
                POSTGRES_DB_NAME="${POSTGRES_USER}"
                POSTGRES_HOST="${CKAN_CLOUD_POSTGRES_HOST}"
                DATASTORE_RO_USER="${POSTGRES_DB_NAME}-datastore-readonly"
                DATASTORE_POSTGRES_USER="${POSTGRES_DB_NAME}-datastore"
                ! create_datastore_db "${POSTGRES_HOST}" "${CKAN_CLOUD_POSTGRES_USER:-postgres}" "${POSTGRES_DB_NAME}" \
                                      "${DATASTORE_POSTGRES_USER}" "${DATASTORE_POSTGRES_PASSWORD}" \
                                      "${DATASTORE_RO_USER}" "${DATASTORE_RO_PASSWORD}" \
                    && exit 1
                CENTRALIZED_DB=1
            fi
            if [ -z "${CKAN_CLOUD_SOLR_HOST}" ]; then
                echo using self-hosted solr
                SOLR_URL="http://solr:8983/solr/ckan"
                CENTRALIZED_SOLR=0
            else
                echo using centralized solr cloud
                if [ -z "${CKAN_CLOUD_INSTANCE_ID}" ]; then
                    SOLRCLOUD_COLLECTION=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(8)))"`
                    SOLRCLOUD_COLLECTION="ckan-${SOLRCLOUD_COLLECTION}"
                else
                    SOLRCLOUD_COLLECTION="${CKAN_CLOUD_INSTANCE_ID}"
                fi
                SOLR_URL="http://${CKAN_CLOUD_SOLR_HOST}:${CKAN_CLOUD_SOLR_PORT:-8983}/solr/${SOLRCLOUD_COLLECTION}"
                CENTRALIZED_SOLR=1
            fi
            echo "Creating ckan env vars secret ${ENV_VARS_SECRET}"
            # Azuresql users are formated like <username@hostname>.
            if [[ "${POSTGRES_HOST}" == *azure.com* ]]; then
                HOST_SUFFIX="@$(echo ${POSTGRES_HOST} | cut -f1 -d".")"
            fi
            # Allow setting app uid and beaker session from env variables
            if [ -z "${CKAN_APP_INSTANCE_UUID}" ]; then
               CKAN_APP_INSTANCE_UUID=`python -c "import uuid;print(uuid.uuid1())"`
            else
               CKAN_APP_INSTANCE_UUID=${CKAN_APP_INSTANCE_UUID}
            fi
            if [ -z "${CKAN_BEAKER_SESSION_SECRET}" ]; then
               CKAN_BEAKER_SESSION_SECRET=`python -c "import binascii,os;print(binascii.hexlify(os.urandom(25)))"`
            else
               CKAN_BEAKER_SESSION_SECRET=${CKAN_BEAKER_SESSION_SECRET}
            fi
            ! kubectl $KUBECTL_GLOBAL_ARGS create secret generic $ENV_VARS_SECRET \
                      --from-literal=CKAN_APP_INSTANCE_UUID=${CKAN_APP_INSTANCE_UUID} \
                      --from-literal=CKAN_BEAKER_SESSION_SECRET=${CKAN_BEAKER_SESSION_SECRET} \
                      --from-literal=POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                      --from-literal=POSTGRES_USER=${POSTGRES_USER}${HOST_SUFFIX} \
                      --from-literal=POSTGRES_HOST=${POSTGRES_HOST} \
                      --from-literal=POSTGRES_DB_NAME=${POSTGRES_DB_NAME} \
                      --from-literal=DATASTORE_POSTGRES_PASSWORD=${DATASTORE_POSTGRES_PASSWORD} \
                      --from-literal=DATASTORE_POSTGRES_USER=${DATASTORE_POSTGRES_USER}${HOST_SUFFIX} \
                      --from-literal=DATASTORE_RO_USER=${DATASTORE_RO_USER}${HOST_SUFFIX} \
                      --from-literal=DATASTORE_RO_PASSWORD=${DATASTORE_RO_PASSWORD} \
                      --from-literal=SOLR_URL=${SOLR_URL} \
                && echo Failed to create ckan env vars secret && exit 1
            ckan_cloud_log '{"event":"ckan-env-vars-created", "env-vars-secret-name": "${ENV_VARS_SECRET}",
                             "centralized_db": "'${CENTRALIZED_DB}'", "centralized_solr": "'${CENTRALIZED_SOLR}'"}'
            echo Created ckan env vars secret && exit 0
        else
            ckan_cloud_log '{"event":"ckan-env-vars-exists", "env-vars-secret-name": "'${ENV_VARS_SECRET}'"}'
            echo Ckan env vars secret already exists && exit 0
        fi
    elif [ "${1}" == "initialize-ckan-secrets" ]; then
        ENV_VARS_SECRET="${2}"
        CKAN_SECRETS_SECRET="${3}"
        ( [ -z "${ENV_VARS_SECRET}" ] || [ -z "${CKAN_SECRETS_SECRET}" ] ) \
            && echo usage: cca-operator initialize-ckan-secrets '<ENV_VARS_SECRET_NAME>' '<CKAN_SECRETS_SECRET_NAME>' \
            && exit 1
        if ! kubectl $KUBECTL_GLOBAL_ARGS get secret "${CKAN_SECRETS_SECRET}"; then
            echo Creating ckan secrets secret $CKAN_SECRETS_SECRET from env vars secret $ENV_VARS_SECRET
            # Azuresql users are formated like <username@hostname>.
            if [[ "${POSTGRES_HOST}" == *azure.com* ]]; then
                HOST_SUFFIX="@$(echo ${POSTGRES_HOST} | cut -f1 -d".")"
            fi
            ! export_ckan_env_vars $ENV_VARS_SECRET && exit 1
            TEMPFILE=`mktemp`
            echo "export BEAKER_SESSION_SECRET=${CKAN_BEAKER_SESSION_SECRET}
            export APP_INSTANCE_UUID=${CKAN_APP_INSTANCE_UUID}
            export SQLALCHEMY_URL=postgresql://${POSTGRES_USER}${HOST_SUFFIX}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-db}/${POSTGRES_DB_NAME:-ckan}?sslmode=require
            export CKAN_DATASTORE_WRITE_URL=postgresql://${DATASTORE_POSTGRES_USER}${HOST_SUFFIX}:${DATASTORE_POSTGRES_PASSWORD}@${POSTGRES_HOST:-datastore-db}/$(echo ${POSTGRES_DB_NAME}-datastore?sslmode=require | cut -f1 -d%)
            export CKAN_DATASTORE_READ_URL=postgresql://${DATASTORE_RO_USER}${HOST_SUFFIX}:${DATASTORE_RO_PASSWORD}@${POSTGRES_HOST:-datastore-db}/$(echo ${POSTGRES_DB_NAME}-datastore?sslmode=require | cut -f1 -d%)
            export SOLR_URL=${SOLR_URL}
            export CKAN_REDIS_URL=redis://redis:6379/1" > $TEMPFILE
        else
            ckan_cloud_log '{"event":"ckan-secrets-exists", "secrets-secret-name": "'${CKAN_SECRETS_SECRET}'"}'
            echo Ckan secrets secret $CKAN_SECRETS_SECRET already exists
            exit 0
        fi
    elif [ "${1}" == "get-ckan-secrets" ]; then
        CKAN_SECRETS_SECRET="${2}"
        OUTPUT_FILE="${3}"
        ( [ -z "${OUTPUT_FILE}" ] || [ -z "${CKAN_SECRETS_SECRET}" ] ) \
            && echo usage: ckan-operator get-ckan-secrets '<CKAN_SECRETS_SECRET_NAME>' '<SECRETS_SH_OUTPUT_FILE>' \
            && exit 1
        echo Getting ckan secrets from $CKAN_SECRETS_SECRET to $OUTPUT_FILE
        ! SECRETS_JSON=`get_secrets_json $CKAN_SECRETS_SECRET` \
            && echo could not find ckan secrets $CKAN_SECRETS_SECRET && exit 1
        ! get_secret_from_json "${SECRETS_JSON}" '"secrets.sh"' > $OUTPUT_FILE \
            && echo failed to parse secrets && exit 1
        ckan_cloud_log '{"event":"got-ckan-secrets", "secrets-secret-name": "'${CKAN_SECRETS_SECRET}'"}'
        echo Successfully copied secrets
        exit 0
    else
        ! bash "$@" && exit 1
        exit 0
    fi
{{ end }}
