  {{ if not .Values.centralizedInfraOnly }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ckan
  finalizers: []
spec:
  replicas: {{ .Values.replicas | default "2" }}
  revisionHistoryLimit: 2
  {{ if .Values.ckanPodReplaceStrategy }}
  strategy:
    type: {{ .Values.ckanPodReplaceStrategy }}
  {{ end }}
  selector:
    matchLabels: {app: ckan}
  template:
    metadata:
      labels: {app: ckan}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/ckan-configmap.yaml") . | sha256sum }}
    spec:
      {{ if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{ end }}
      serviceAccountName: ckan-{{ .Release.Namespace }}-operator
      initContainers:
      - name: secrets
        image: {{ .Values.ckanOperatorImage | quote }}
        command:
        - sh
        - "-c"
        - |
          chmod -x install.sh
          ./install.sh
          ./cca-operator.sh initialize-ckan-env-vars {{ .Values.envVarsSecretName | quote }} &&\
          ./cca-operator.sh initialize-ckan-secrets {{ .Values.envVarsSecretName | quote }} \
                                                    {{ .Values.ckanSecretName | quote }} &&\
          ./cca-operator.sh get-ckan-secrets {{ .Values.ckanSecretName | quote }} /etc/ckan-conf/secrets/secrets.sh &&\
          cat /etc/ckan-conf/secrets/secrets.sh &&
          echo ckan secrets initialized successfully && exit 0
          echo failed to initialize, waiting 1 hour before exiting && sleep 3600 && exit 1
        {{ if .Values.useCentralizedInfra }}
        env:
        {{ if .Values.ckanAppInstanceUUID }}
        - name: CKAN_APP_INSTANCE_UUID
          value: {{ .Values.ckanAppInstanceUUID | quote }}
        {{ end }}
        {{ if .Values.beakerSessionSecret }}
        - name: CKAN_BEAKER_SESSION_SECRET
          value: {{ .Values.beakerSessionSecret | quote }}
        {{ end }}
        - name: CKAN_CLOUD_INSTANCE_ID
          {{ if .Values.ckanCloudInstanceId }}
          value: {{ .Values.ckanCloudInstanceId | quote }}
          {{ else }}
          value: {{ .Release.Namespace | quote }}
          {{ end }}
        {{ if .Values.centralizedSecretName }}
        - name: CKAN_CLOUD_POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.centralizedSecretName | quote }}
              key: "POSTGRES_HOST"
        - name: CKAN_CLOUD_POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.centralizedSecretName | quote }}
              key: "POSTGRES_USER"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.centralizedSecretName | quote }}
              key: "POSTGRES_PASSWORD"
        {{ else }}
        - name: CKAN_CLOUD_POSTGRES_HOST
          value: db.ckan-cloud
        - name: CKAN_CLOUD_POSTGRES_USER
          value: postgres
        - name: PGPASSWORD
          value: "123456"
        {{ end }}
        - name: CKAN_CLOUD_SOLR_HOST
          value: {{ .Values.centralizedSolrHost | default "solr.ckan-cloud" | quote }}
        - name: CKAN_CLOUD_SOLR_PORT
          value: {{ .Values.centralizedSolrPort | default "8983" | quote }}
        {{ end }}
        {{ if .Values.useCloudStorage }}
        envFrom:
        - secretRef:
            name: {{ .Values.bucketSecretName }}
        {{ end }}
        volumeMounts:
        - name: ckan-conf-secrets
          mountPath: /etc/ckan-conf/secrets
        - mountPath: /
          name: ckan-init
          readOnly: true
      - name: files
        image: alpine
        command:
        - sh
        - "-c"
        {{ if .Values.enableLocalData }}
        - |
          chown -R 900:900 /var/lib/ckan && chmod -R ug+w /var/lib/ckan && chown -R 900:900 /etc/ckan-conf/secrets &&\
          ls -lah /var/lib/ckan && ls -lah /etc/ckan-conf/secrets
        {{ else }}
        - |
          chown -R 900:900 /etc/ckan-conf/secrets && ls -lah /etc/ckan-conf/secrets
        {{ end }}
        securityContext:
          runAsUser: 0
        volumeMounts:
        {{ if .Values.enableLocalData }}
        - {mountPath: /var/lib/ckan, name: ckan-data, subPath: {{ .Release.Namespace }}-ckan}
        {{ end }}
        - name: ckan-conf-secrets
          mountPath: /etc/ckan-conf/secrets
      {{ if .Values.ckanPrimaryColor }}
      - name: themer
        image: {{ .Values.themerImage | quote }}
        env:
        - name: CKAN_PRIMARY_COLOR
          value: {{ .Values.ckanPrimaryColor | quote }}
        {{ if .Values.enableLocalData }}
        volumeMounts:
        - {mountPath: /var/lib/ckan, name: ckan-data, subPath: {{ .Release.Namespace }}-ckan}
        {{ end }}
      {{ end }}
      {{ if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
      {{ end }}
      containers:
      - name: ckan
        image: {{ .Values.ckanImage | quote }}
        {{ if .Values.runAsRoot }}
        securityContext:
          runAsUser: 0
        {{ end }}
        env:
        - name: CKAN_STORAGE_PATH
          value: /var/lib/ckan/data
        - name: CKAN_K8S_SECRETS
          value: /etc/ckan-conf/secrets/secrets.sh
        - name: CKAN_K8S_TEMPLATES
          value: /etc/ckan-conf/templates
        - name: GUNICORN_WORKERS
          value: {{ .Values.ckanGunicornWorkers | default "2" | quote }}
        - name: DEBUG_MODE
          value: {{ .Values.debugMode | default "no" | quote }}
{{ if .Values.extraCkanContainerEnvs }}
{{ .Values.extraCkanContainerEnvs | indent 8 }}
{{ end }}
        ports:
        - containerPort: 5000
        {{ if .Values.ckanResources }}
        resources: {{ .Values.ckanResources }}
        {{ end }}
        volumeMounts:
        {{ if .Values.enableLocalData }}
        - {mountPath: /var/lib/ckan, name: ckan-data, subPath: {{ .Release.Namespace }}-ckan}
        {{ end }}
        - name: ckan-conf-secrets
          mountPath: /etc/ckan-conf/secrets
          readOnly: true
        - name: ckan-conf-templates
          mountPath: /etc/ckan-conf/templates
          readOnly: true
        {{ if .Values.enableGiftless }}
        - mountPath: /etc/ssh/jwt-rs256.key
          name: jwt-key
          readOnly: true
          subPath: jwt-rs256.key
        - mountPath: /etc/ssh/jwt-rs256.key.pub
          name: jwt-key-pub
          readOnly: true
          subPath: jwt-rs256.key.pub
        {{ end }}
        {{ if not .Values.noProbes }}
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: {{ .Values.ckanReadinessInitialDelaySeconds | default "30" }}
          periodSeconds: {{ .Values.ckanReadinessPeriodSeconds | default "5" }}
          timeoutSeconds: {{ .Values.ckanReadinessTimeoutSeconds | default "10" }}
          failureThreshold: {{ .Values.ckanReadinessFailureThreshold | default "15" }}
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: {{ .Values.ckanLivenessInitialDelaySeconds | default "60" }}
          periodSeconds: {{ .Values.ckanLivenessPeriodSeconds | default "5" }}
          timeoutSeconds: {{ .Values.ckanLivenessTimeoutSeconds | default "10" }}
          failureThreshold: {{ .Values.ckanLivenessFailureThreshold | default "15" }}
        {{ end }}
      volumes:
      - name: ckan-init
        configMap:
          defaultMode: 0777
          name: ckan-init
      - name: ckan-conf-secrets
        emptyDir: {}
      - name: ckan-conf-templates
        configMap:
          name: ckan
      {{ if .Values.enableLocalData }}
      - name: ckan-data
      {{ if .Values.usePersistentVolumes }}
        persistentVolumeClaim:
          claimName: {{ .Release.Namespace }}-ckan
      {{ else }}
        hostPath:
          path: /var/ckan-cloud-{{ .Release.Namespace }}
          type: DirectoryOrCreate
      {{ end }}
      {{ end }}
      {{ if .Values.enableGiftless }}
      - secret:
          secretName: jwt-keys
        name: jwt-key
      - secret:
          secretName: jwt-keys
        name: jwt-key-pub
      {{ end }}
{{ end }}
